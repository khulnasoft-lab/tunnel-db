name: Tunnel DB
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

env:
  REPO_OWNER: ${{ github.repository_owner }}
  GH_USER: khulnasoft-bot
  VERSION: 2

jobs:
  build:
    name: Build DB
    runs-on: ubuntu-24.04
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Maximize build space
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10
        with:
          root-reserve-mb: 32768
          remove-android: "true"
          remove-docker-images: "true"
          remove-dotnet: "true"
          remove-haskell: "true"

      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod

      - name: Install bbolt
        run: go install go.etcd.io/bbolt/cmd/bbolt@v1.3.5

      - name: Download vuln-list and advisories
        run: make db-fetch-langs db-fetch-vuln-list

      - name: Build the binary
        run: make build

      - name: Build database
        run: make db-build

      - name: Compact DB
        run: make db-compact

      - name: Compress assets
        run: make db-compress

      - name: Move DB
        run: mv assets/db.tar.gz .

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ORG_REPO_TOKEN }} # Use PAT with write:packages permission

      - name: Install ORAS
        run: |
          curl -LO https://github.com/oras-project/oras/releases/download/v1.2.0/oras_1.2.0_linux_amd64.tar.gz
          tar -xvf oras_1.2.0_linux_amd64.tar.gz
          sudo mv oras /usr/local/bin/

      - name: Upload assets to registries
        run: |
          lowercase_repo=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | sed 's/^khulnasoft-lab\///')
          echo "Starting artifact upload process..."
          
          # Define registry repositories
          declare -A registries=(
            ["ghcr.io"]="${{ github.repository_owner }}/${lowercase_repo}"
            ["docker.io"]="khulnasoft/${lowercase_repo}"
          )

          # Loop through registries and push artifacts
          for registry in "${!registries[@]}"; do
            repo_name=${registries[$registry]}
            full_registry_url="${registry}/${repo_name}"
            echo "Processing registry: ${full_registry_url}"

            tags=(latest ${{ env.VERSION }})
            for tag in "${tags[@]}"; do
              echo "Pushing artifact with tag: ${tag}"

              if oras push --artifact-type application/vnd.khulnasoft.tunnel.config.v1+json \
                "${full_registry_url}:${tag}" \
                db.tar.gz:application/vnd.khulnasoft.tunnel.db.layer.v1.tar+gzip; then
                echo "Successfully pushed to ${full_registry_url}:${tag}"
              else
                echo "Failed to push to ${full_registry_url}:${tag}"
                exit 1
              fi
            done
          done
            
          echo "Artifact upload process completed."
