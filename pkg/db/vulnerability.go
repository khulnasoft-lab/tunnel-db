package db

import (
	"encoding/json"

	"github.com/khulnasoft-lab/tunnel-db/pkg/types"
	"github.com/samber/oops"
	bolt "go.etcd.io/bbolt"
)

const (
	vulnerabilityBucket = "vulnerability"
)

// PutVulnerability stores a vulnerability in the BoltDB.
func (dbc Config) PutVulnerability(tx *bolt.Tx, cveID string, vuln types.Vulnerability) error {
	if err := dbc.put(tx, []string{vulnerabilityBucket}, cveID, vuln); err != nil {
		return oops.With("vuln_id", cveID).Wrapf(err, "failed to put vulnerability")
	}
	return nil
}

// GetVulnerability retrieves a vulnerability from the BoltDB by CVE ID.
func (dbc Config) GetVulnerability(cveID string) (types.Vulnerability, error) {
	eb := oops.With("vuln_id", cveID)

	var vuln types.Vulnerability
	err := dbc.DB.View(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte(vulnerabilityBucket))
		if bucket == nil {
			return eb.Errorf("bucket %s not found", vulnerabilityBucket)
		}

		value := bucket.Get([]byte(cveID))
		if value == nil {
			return eb.Errorf("vulnerability not found")
		}

		if err := json.Unmarshal(value, &vuln); err != nil {
			return eb.Wrapf(err, "json unmarshal error")
		}

		return nil
	})

	if err != nil {
		return types.Vulnerability{}, eb.Wrapf(err, "failed to get vulnerability")
	}

	return vuln, nil
}
